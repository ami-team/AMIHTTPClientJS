/*!
 * Copyright © 2021-2021 CNRS/LPSC
 *
 * Author: Jérôme ODIER (jerome.odier@lpsc.in2p3.fr)
 *
 * Repositories: https://gitlab.in2p3.fr/ami-team/AMIHTTPClientJS/
 *               https://www.github.com/ami-team/AMIHTTPClientJS/
 *
 * This software is a computer program whose purpose is to provide an
 * HTTP Client to the ATLAS Metadata Interface (AMI) ecosystem.
 *
 * This software is governed by the CeCILL-C license under French law and
 * abiding by the rules of distribution of free software. You can use,
 * modify and/or redistribute the software under the terms of the CeCILL-C
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 *
 */
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/client.js":
/*!***********************!*\
  !*** ./src/client.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AMIHTTPClient)\n/* harmony export */ });\n/* harmony import */ var jspath__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jspath */ \"./node_modules/jspath/index.js\");\n/* harmony import */ var jspath__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jspath__WEBPACK_IMPORTED_MODULE_0__);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar AMIHTTPClient = function () {\n  function AMIHTTPClient(endpoint) {\n    _classCallCheck(this, AMIHTTPClient);\n\n    _defineProperty(this, \"_endpoint\", 'http://xxyy.zz');\n\n    _defineProperty(this, \"_converter\", 'AMIXmlToJson.xsl');\n\n    _defineProperty(this, \"_paramRegExp\", new RegExp('-\\\\W*([a-zA-Z][a-zA-Z0-9]*)\\\\W*=\\\\W*\\\\?', 'g'));\n\n    this._endpoint = endpoint;\n  }\n\n  _createClass(AMIHTTPClient, [{\n    key: \"execute\",\n    value: function execute(command, options) {\n      options = options || {};\n      var result = $.Deferred();\n\n      var endpoint = (options.endpoint || this._endpoint).trim();\n\n      var converter = (options.converter || this._converter).trim();\n\n      var extras = options.extras || {};\n      var params = options.params || [];\n      var context = options.context || result;\n      var timeout = options.timeout || 120000;\n      command = (command || '').trim().replace(this._paramRegExp, function (x, y) {\n        return \"-\".concat(y, \"=\\\"\").concat(String(params.shift()).replace('\\\\', '\\\\\\\\').replace('\\n', '\\\\n').replace('\"', '\\\\\"').replace(\"'\", \"\\\\'\"), \"\\\"\");\n      });\n\n      var data = _objectSpread(_objectSpread({}, extras), {}, {\n        Command: command,\n        Converter: converter\n      });\n\n      var url = endpoint;\n      var urlWithParameters = endpoint + '?' + $.param(data);\n\n      if (converter === 'AMIXmlToJson.xsl') {\n        $.ajax({\n          url: url,\n          data: data,\n          type: 'POST',\n          timeout: timeout,\n          dataType: 'json',\n          xhrFields: {\n            withCredentials: true\n          },\n          success: function success(data) {\n            var info = jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('.AMIMessage.info.$', data);\n            var error = jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('.AMIMessage.error.$', data);\n\n            if (error.length === 0) {\n              result.resolveWith(context, [data, info.join('. '), urlWithParameters]);\n            } else {\n              result.rejectWith(context, [data, error.join('. '), urlWithParameters]);\n            }\n          },\n          error: function error(jqXHR, textStatus) {\n            if (textStatus === 'error') {\n              textStatus = 'service temporarily unreachable';\n            }\n\n            if (textStatus === 'parsererror') {\n              textStatus = 'resource temporarily unreachable';\n            }\n\n            var data = {\n              'AMIMessage': [{\n                'error': [{\n                  '$': textStatus\n                }]\n              }]\n            };\n            result.rejectWith(context, [data, textStatus, urlWithParameters]);\n          }\n        });\n      } else {\n        $.ajax({\n          url: url,\n          data: data,\n          type: 'POST',\n          timeout: timeout,\n          dataType: 'text',\n          xhrFields: {\n            withCredentials: true\n          },\n          success: function success(data) {\n            result.resolveWith(context, [data, data, urlWithParameters]);\n          },\n          error: function error(jqXHR, textStatus) {\n            if (textStatus === 'error') {\n              textStatus = 'service temporarily unreachable';\n            }\n\n            result.rejectWith(context, [textStatus, textStatus, urlWithParameters]);\n          }\n        });\n      }\n\n      return result.promise();\n    }\n  }, {\n    key: \"signInByPassword\",\n    value: function signInByPassword(username, password, options) {\n      options = options || {};\n      var result = $.Deferred();\n      var context = options.context || result;\n      this.execute('GetSessionInfo -AMIUser=? -AMIPass=?', {\n        extras: {\n          'NoCert': null\n        },\n        params: [username, password]\n      }).then(function (data, message) {\n        var userInfo = {};\n        var roleInfo = {};\n        var bookmarkInfo = {};\n        var udpInfo = {};\n        var ssoInfo = {};\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"user\"}.row.field', data).forEach(function (item) {\n          userInfo[item['@name']] = item['$'];\n        });\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"udp\"}.row.field', data).forEach(function (item) {\n          udpInfo[item['@name']] = item['$'];\n        });\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"sso\"}.row.field', data).forEach(function (item) {\n          ssoInfo[item['@name']] = item['$'];\n        });\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"bookmark\"}.row', data).forEach(function (row) {\n          var hash = '';\n          var bookmark = {};\n          row.field.forEach(function (field) {\n            bookmark[field['@name']] = field['$'];\n\n            if (field['@name'] === 'hash') {\n              hash = field['$'];\n            }\n          });\n          bookmarkInfo[hash] = bookmark;\n        });\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"role\"}.row', data).forEach(function (row) {\n          var name = '';\n          var role = {};\n          row.field.forEach(function (field) {\n            role[field['@name']] = field['$'];\n\n            if (field['@name'] === 'name') {\n              name = field['$'];\n            }\n          });\n          roleInfo[name] = role;\n        });\n        result.resolveWith(context, [data, message, userInfo, roleInfo, bookmarkInfo, udpInfo, ssoInfo]);\n      }, function (data, message) {\n        result.rejectWith(context, [data, message, {\n          AMIUser: 'guest',\n          guestUser: 'guest'\n        }, {}, {}, {}, {}]);\n      });\n      return result.promise();\n    }\n  }, {\n    key: \"signInByCertificate\",\n    value: function signInByCertificate(options) {\n      options = options || {};\n      var result = $.Deferred();\n      var context = options.context || result;\n      this.execute('GetSessionInfo').then(function (data, message) {\n        var userInfo = {};\n        var roleInfo = {};\n        var bookmarkInfo = {};\n        var udpInfo = {};\n        var ssoInfo = {};\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"user\"}.row.field', data).forEach(function (item) {\n          userInfo[item['@name']] = item['$'];\n        });\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"udp\"}.row.field', data).forEach(function (item) {\n          udpInfo[item['@name']] = item['$'];\n        });\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"sso\"}.row.field', data).forEach(function (item) {\n          ssoInfo[item['@name']] = item['$'];\n        });\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"bookmark\"}.row', data).forEach(function (row) {\n          var hash = '';\n          var bookmark = {};\n          row.field.forEach(function (field) {\n            bookmark[field['@name']] = field['$'];\n\n            if (field['@name'] === 'hash') {\n              hash = field['$'];\n            }\n          });\n          bookmarkInfo[hash] = bookmark;\n        });\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"role\"}.row', data).forEach(function (row) {\n          var name = '';\n          var role = {};\n          row.field.forEach(function (field) {\n            role[field['@name']] = field['$'];\n\n            if (field['@name'] === 'name') {\n              name = field['$'];\n            }\n          });\n          roleInfo[name] = role;\n        });\n        result.resolveWith(context, [data, message, userInfo, roleInfo, bookmarkInfo, udpInfo, ssoInfo]);\n      }, function (data, message) {\n        result.rejectWith(context, [data, message, {\n          AMIUser: 'guest',\n          guestUser: 'guest'\n        }, {}, {}, {}, {}]);\n      });\n      return result.promise();\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut(options) {\n      options = options || {};\n      var result = $.Deferred();\n      var context = options.context || result;\n      this.execute('GetSessionInfo -AMIUser=? -AMIPass=?', {\n        extras: {\n          'NoCert': null\n        },\n        params: ['', '']\n      }).then(function (data, message) {\n        var userInfo = {};\n        var roleInfo = {};\n        var bookmarkInfo = {};\n        var udpInfo = {};\n        var ssoInfo = {};\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"user\"}.row.field', data).forEach(function (item) {\n          userInfo[item['@name']] = item['$'];\n        });\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"udp\"}.row.field', data).forEach(function (item) {\n          udpInfo[item['@name']] = item['$'];\n        });\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"sso\"}.row.field', data).forEach(function (item) {\n          ssoInfo[item['@name']] = item['$'];\n        });\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"bookmark\"}.row', data).forEach(function (row) {\n          var hash = '';\n          var bookmark = {};\n          row.field.forEach(function (field) {\n            bookmark[field['@name']] = field['$'];\n\n            if (field['@name'] === 'hash') {\n              hash = field['$'];\n            }\n          });\n          bookmarkInfo[hash] = bookmark;\n        });\n        jspath__WEBPACK_IMPORTED_MODULE_0___default().apply('..rowset{.@type===\"role\"}.row', data).forEach(function (row) {\n          var name = '';\n          var role = {};\n          row.field.forEach(function (field) {\n            role[field['@name']] = field['$'];\n\n            if (field['@name'] === 'name') {\n              name = field['$'];\n            }\n          });\n          roleInfo[name] = role;\n        });\n        result.resolveWith(context, [data, message, userInfo, roleInfo, bookmarkInfo, udpInfo, ssoInfo]);\n      }, function (data, message) {\n        result.rejectWith(context, [data, message, {\n          AMIUser: 'guest',\n          guestUser: 'guest'\n        }, {}, {}, {}, {}]);\n      });\n      return result.promise();\n    }\n  }, {\n    key: \"jspath\",\n    value: function jspath(path, json) {\n      return jspath__WEBPACK_IMPORTED_MODULE_0___default().apply(path, json);\n    }\n  }]);\n\n  return AMIHTTPClient;\n}();\n\n\nif (typeof window !== 'undefined') window.AMIHTTPClient = AMIHTTPClient;\n\n//# sourceURL=webpack://ami-http-client/./src/client.js?");

/***/ }),

/***/ "./node_modules/jspath/index.js":
/*!**************************************!*\
  !*** ./node_modules/jspath/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./lib/jspath */ \"./node_modules/jspath/lib/jspath.js\");\n\n//# sourceURL=webpack://ami-http-client/./node_modules/jspath/index.js?");

/***/ }),

/***/ "./node_modules/jspath/lib/jspath.js":
/*!*******************************************!*\
  !*** ./node_modules/jspath/lib/jspath.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_RESULT__;\n/**\n* JSPath\n*\n* Copyright (c) 2012 Filatov Dmitry (dfilatov@yandex-team.ru)\n* With parts by Marat Dulin (mdevils@gmail.com)\n* Dual licensed under the MIT and GPL licenses:\n* http://www.opensource.org/licenses/mit-license.php\n* http://www.gnu.org/licenses/gpl.html\n*\n* @version 0.4.0\n*/\n\n(function() {\n\nvar SYNTAX = {\n        PATH            : 1,\n        SELECTOR        : 2,\n        OBJ_PRED        : 3,\n        POS_PRED        : 4,\n        LOGICAL_EXPR    : 5,\n        COMPARISON_EXPR : 6,\n        MATH_EXPR       : 7,\n        CONCAT_EXPR     : 8,\n        UNARY_EXPR      : 9,\n        POS_EXPR        : 10,\n        LITERAL         : 11\n    };\n\n// parser\n\nvar parse = (function() {\n\n    var TOKEN = {\n            ID    : 1,\n            NUM   : 2,\n            STR   : 3,\n            BOOL  : 4,\n            NULL  : 5,\n            PUNCT : 6,\n            EOP   : 7\n        },\n        MESSAGES = {\n            UNEXP_TOKEN : 'Unexpected token \"%0\"',\n            UNEXP_EOP   : 'Unexpected end of path'\n        };\n\n    var path, idx, buf, len;\n\n    function parse(_path) {\n        path = _path.split('');\n        idx = 0;\n        buf = null;\n        len = path.length;\n\n        var res = parsePathConcatExpr(),\n            token = lex();\n\n        if(token.type !== TOKEN.EOP) {\n            throwUnexpected(token);\n        }\n\n        return res;\n    }\n\n    function parsePathConcatExpr() {\n        var expr = parsePathConcatPartExpr(),\n            operands;\n\n        while(match('|')) {\n            lex();\n            (operands || (operands = [expr])).push(parsePathConcatPartExpr());\n        }\n\n        return operands?\n            {\n                type : SYNTAX.CONCAT_EXPR,\n                args : operands\n            } :\n            expr;\n    }\n\n    function parsePathConcatPartExpr() {\n        return match('(')?\n            parsePathGroupExpr() :\n            parsePath();\n    }\n\n    function parsePathGroupExpr() {\n        expect('(');\n        var expr = parsePathConcatExpr();\n        expect(')');\n\n        var parts = [],\n            part;\n        while((part = parsePredicate())) {\n            parts.push(part);\n        }\n\n        if(!parts.length) {\n            return expr;\n        }\n        else if(expr.type === SYNTAX.PATH) {\n            expr.parts = expr.parts.concat(parts);\n            return expr;\n        }\n\n        parts.unshift(expr);\n\n        return {\n            type  : SYNTAX.PATH,\n            parts : parts\n        };\n    }\n\n    function parsePredicate() {\n        if(match('[')) {\n            return parsePosPredicate();\n        }\n\n        if(match('{')) {\n            return parseObjectPredicate();\n        }\n\n        if(match('(')) {\n            return parsePathGroupExpr();\n        }\n    }\n\n    function parsePath() {\n        if(!matchPath()) {\n            throwUnexpected(lex());\n        }\n\n        var fromRoot = false,\n            subst;\n\n        if(match('^')) {\n            lex();\n            fromRoot = true;\n        }\n        else if(matchSubst()) {\n            subst = lex().val.substr(1);\n        }\n\n        var parts = [],\n            part;\n        while((part = parsePathPart())) {\n            parts.push(part);\n        }\n\n        return {\n            type     : SYNTAX.PATH,\n            fromRoot : fromRoot,\n            subst    : subst,\n            parts    : parts\n        };\n    }\n\n    function parsePathPart() {\n        return matchSelector()?\n            parseSelector() :\n            parsePredicate();\n    }\n\n    function parseSelector() {\n        var selector = lex().val,\n            token = lookahead(),\n            prop;\n\n        if(match('*') || token.type === TOKEN.ID || token.type === TOKEN.STR) {\n            prop = lex().val;\n        }\n\n        return {\n            type     : SYNTAX.SELECTOR,\n            selector : selector,\n            prop     : prop\n        };\n    }\n\n    function parsePosPredicate() {\n        expect('[');\n        var expr = parsePosExpr();\n        expect(']');\n\n        return {\n            type : SYNTAX.POS_PRED,\n            arg  : expr\n        };\n    }\n\n    function parseObjectPredicate() {\n        expect('{');\n        var expr = parseLogicalORExpr();\n        expect('}');\n\n        return {\n            type : SYNTAX.OBJ_PRED,\n            arg  : expr\n        };\n    }\n\n    function parseLogicalORExpr() {\n        var expr = parseLogicalANDExpr(),\n            operands;\n\n        while(match('||')) {\n            lex();\n            (operands || (operands = [expr])).push(parseLogicalANDExpr());\n        }\n\n        return operands?\n            {\n                type : SYNTAX.LOGICAL_EXPR,\n                op   : '||',\n                args : operands\n            } :\n            expr;\n    }\n\n    function parseLogicalANDExpr() {\n        var expr = parseEqualityExpr(),\n            operands;\n\n        while(match('&&')) {\n            lex();\n            (operands || (operands = [expr])).push(parseEqualityExpr());\n        }\n\n        return operands?\n            {\n                type : SYNTAX.LOGICAL_EXPR,\n                op   : '&&',\n                args : operands\n            } :\n            expr;\n    }\n\n    function parseEqualityExpr() {\n        var expr = parseRelationalExpr();\n\n        while(\n            match('==') || match('!=') || match('===') || match('!==') ||\n            match('^==') || match('==^') ||match('^=') || match('=^') ||\n            match('$==') || match('==$') || match('$=') || match('=$') ||\n            match('*==') || match('==*')|| match('*=') || match('=*')\n        ) {\n            expr = {\n                type : SYNTAX.COMPARISON_EXPR,\n                op   : lex().val,\n                args : [expr, parseEqualityExpr()]\n            };\n        }\n\n        return expr;\n    }\n\n    function parseRelationalExpr() {\n        var expr = parseAdditiveExpr();\n\n        while(match('<') || match('>') || match('<=') || match('>=')) {\n            expr = {\n                type : SYNTAX.COMPARISON_EXPR,\n                op   : lex().val,\n                args : [expr, parseRelationalExpr()]\n            };\n        }\n\n        return expr;\n    }\n\n    function parseAdditiveExpr() {\n        var expr = parseMultiplicativeExpr();\n\n        while(match('+') || match('-')) {\n            expr = {\n                type : SYNTAX.MATH_EXPR,\n                op   : lex().val,\n                args : [expr, parseMultiplicativeExpr()]\n            };\n        }\n\n        return expr;\n    }\n\n    function parseMultiplicativeExpr() {\n        var expr = parseUnaryExpr();\n\n        while(match('*') || match('/') || match('%')) {\n            expr = {\n                type : SYNTAX.MATH_EXPR,\n                op   : lex().val,\n                args : [expr, parseMultiplicativeExpr()]\n            };\n        }\n\n        return expr;\n    }\n\n    function parsePosExpr() {\n        if(match(':')) {\n            lex();\n            return {\n                type  : SYNTAX.POS_EXPR,\n                toIdx : parseUnaryExpr()\n            };\n        }\n\n        var fromExpr = parseUnaryExpr();\n        if(match(':')) {\n            lex();\n            if(match(']')) {\n                return {\n                    type    : SYNTAX.POS_EXPR,\n                    fromIdx : fromExpr\n                };\n            }\n\n            return {\n                type    : SYNTAX.POS_EXPR,\n                fromIdx : fromExpr,\n                toIdx   : parseUnaryExpr()\n            };\n        }\n\n        return {\n            type : SYNTAX.POS_EXPR,\n            idx  : fromExpr\n        };\n    }\n\n    function parseUnaryExpr() {\n        if(match('!') || match('-')) {\n            return {\n                type : SYNTAX.UNARY_EXPR,\n                op   : lex().val,\n                arg  : parseUnaryExpr()\n            };\n        }\n\n        return parsePrimaryExpr();\n    }\n\n    function parsePrimaryExpr() {\n        var token = lookahead(),\n            type = token.type;\n\n        if(type === TOKEN.STR || type === TOKEN.NUM || type === TOKEN.BOOL || type === TOKEN.NULL) {\n            return {\n                type : SYNTAX.LITERAL,\n                val  : lex().val\n            };\n        }\n\n        if(matchPath()) {\n            return parsePath();\n        }\n\n        if(match('(')) {\n            return parseGroupExpr();\n        }\n\n        return throwUnexpected(lex());\n    }\n\n    function parseGroupExpr() {\n        expect('(');\n        var expr = parseLogicalORExpr();\n        expect(')');\n\n        return expr;\n    }\n\n    function match(val) {\n        var token = lookahead();\n        return token.type === TOKEN.PUNCT && token.val === val;\n    }\n\n    function matchPath() {\n        return matchSelector() || matchSubst() || match('^');\n    }\n\n    function matchSelector() {\n        var token = lookahead();\n        if(token.type === TOKEN.PUNCT) {\n            var val = token.val;\n            return val === '.' || val === '..';\n        }\n\n        return false;\n    }\n\n    function matchSubst() {\n        var token = lookahead();\n        return token.type === TOKEN.ID && token.val[0] === '$';\n    }\n\n    function expect(val) {\n        var token = lex();\n        if(token.type !== TOKEN.PUNCT || token.val !== val) {\n            throwUnexpected(token);\n        }\n    }\n\n    function lookahead() {\n        if(buf !== null) {\n            return buf;\n        }\n\n        var pos = idx;\n        buf = advance();\n        idx = pos;\n\n        return buf;\n    }\n\n    function advance() {\n        while(isWhiteSpace(path[idx])) {\n            ++idx;\n        }\n\n        if(idx >= len) {\n            return {\n                type  : TOKEN.EOP,\n                range : [idx, idx]\n            };\n        }\n\n        var token = scanPunctuator();\n        if(token ||\n                (token = scanId()) ||\n                (token = scanString()) ||\n                (token = scanNumeric())) {\n            return token;\n        }\n\n        token = { range : [idx, idx] };\n        idx >= len?\n            token.type = TOKEN.EOP :\n            token.val = path[idx];\n\n        throwUnexpected(token);\n    }\n\n    function lex() {\n        var token;\n\n        if(buf) {\n            idx = buf.range[1];\n            token = buf;\n            buf = null;\n            return token;\n        }\n\n        return advance();\n    }\n\n    function isDigit(ch) {\n        return '0123456789'.indexOf(ch) >= 0;\n    }\n\n    function isWhiteSpace(ch) {\n        return ' \\r\\n\\t'.indexOf(ch) > -1;\n    }\n\n    function isIdStart(ch) {\n        return ch === '$' || ch === '@' || ch === '_' || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\n    }\n\n    function isIdPart(ch) {\n        return isIdStart(ch) || (ch >= '0' && ch <= '9');\n    }\n\n    function scanId() {\n        var ch = path[idx];\n\n        if(!isIdStart(ch)) {\n            return;\n        }\n\n        var start = idx,\n            id = ch;\n\n        while(++idx < len) {\n            ch = path[idx];\n            if(!isIdPart(ch)) {\n                break;\n            }\n            id += ch;\n        }\n\n        switch(id) {\n            case 'true':\n            case 'false':\n                return {\n                    type  : TOKEN.BOOL,\n                    val   : id === 'true',\n                    range : [start, idx]\n                };\n\n            case 'null':\n                return {\n                    type  : TOKEN.NULL,\n                    val   : null,\n                    range : [start, idx]\n                };\n\n            default:\n                return {\n                    type  : TOKEN.ID,\n                    val   : id,\n                    range : [start, idx]\n                };\n        }\n    }\n\n    function scanString() {\n        if(path[idx] !== '\"' && path[idx] !== '\\'') {\n            return;\n        }\n\n        var orig = path[idx],\n            start = ++idx,\n            str = '',\n            eosFound = false,\n            ch;\n\n        while(idx < len) {\n            ch = path[idx++];\n            if(ch === '\\\\') {\n                ch = path[idx++];\n            }\n            else if((ch === '\"' || ch === '\\'') && ch === orig) {\n                eosFound = true;\n                break;\n            }\n            str += ch;\n        }\n\n        if(eosFound) {\n            return {\n                type : TOKEN.STR,\n                val : str,\n                range : [start, idx]\n            };\n        }\n    }\n\n    function scanNumeric() {\n        var start = idx,\n            ch = path[idx],\n            isFloat = ch === '.';\n\n        if(isFloat || isDigit(ch)) {\n            var num = ch;\n            while(++idx < len) {\n                ch = path[idx];\n                if(ch === '.') {\n                    if(isFloat) {\n                        return;\n                    }\n                    isFloat = true;\n                }\n                else if(!isDigit(ch)) {\n                    break;\n                }\n\n                num += ch;\n            }\n\n            return {\n                type  : TOKEN.NUM,\n                val   : isFloat? parseFloat(num) : parseInt(num, 10),\n                range : [start, idx]\n            };\n        }\n    }\n\n    function scanPunctuator() {\n        var start = idx,\n            ch1 = path[idx],\n            ch2 = path[idx + 1];\n\n        if(ch1 === '.') {\n            if(isDigit(ch2)) {\n                return;\n            }\n\n            return path[++idx] === '.'?\n                {\n                    type  : TOKEN.PUNCT,\n                    val   : '..',\n                    range : [start, ++idx]\n                } :\n                {\n                    type  : TOKEN.PUNCT,\n                    val   : '.',\n                    range : [start, idx]\n                };\n        }\n\n        if(ch2 === '=') {\n            var ch3 = path[idx + 2];\n            if(ch3 === '=') {\n                if('=!^$*'.indexOf(ch1) >= 0) {\n                    return {\n                        type  : TOKEN.PUNCT,\n                        val   : ch1 + ch2 + ch3,\n                        range : [start, idx += 3]\n                    };\n                }\n            }\n            else if('^$*'.indexOf(ch3) >= 0) {\n                if(ch1 === '=') {\n                    return {\n                        type  : TOKEN.PUNCT,\n                        val   : ch1 + ch2 + ch3,\n                        range : [start, idx += 3]\n                    };\n                }\n            }\n            else if('=!^$*><'.indexOf(ch1) >= 0) {\n                return {\n                    type  : TOKEN.PUNCT,\n                    val   : ch1 + ch2,\n                    range : [start, idx += 2]\n                };\n            }\n        }\n        else if(ch1 === '=' && '^$*'.indexOf(ch2) >= 0) {\n            return {\n                type  : TOKEN.PUNCT,\n                val   : ch1 + ch2,\n                range : [start, idx += 2]\n            };\n        }\n\n        if(ch1 === ch2 && (ch1 === '|' || ch1 === '&')) {\n            return {\n                type  : TOKEN.PUNCT,\n                val   : ch1 + ch2,\n                range : [start, idx += 2]\n            };\n        }\n\n        if(':{}()[]^+-*/%!><|'.indexOf(ch1) >= 0) {\n            return {\n                type  : TOKEN.PUNCT,\n                val   : ch1,\n                range : [start, ++idx]\n            };\n        }\n    }\n\n    function throwUnexpected(token) {\n        if(token.type === TOKEN.EOP) {\n            throwError(token, MESSAGES.UNEXP_EOP);\n        }\n\n        throwError(token, MESSAGES.UNEXP_TOKEN, token.val);\n    }\n\n    function throwError(token, messageFormat) {\n        var args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function(_, idx) {\n                    return args[idx] || '';\n                }),\n            error = new Error(msg);\n\n        error.column = token.range[0];\n\n        throw error;\n    }\n\n    return parse;\n})();\n\n// translator\n\nvar translate = (function() {\n\n    var body, vars, lastVarId, unusedVars;\n\n    function acquireVar() {\n        if(unusedVars.length) {\n            return unusedVars.shift();\n        }\n\n        var varName = 'v' + ++lastVarId;\n        vars.push(varName);\n        return varName;\n    }\n\n    function releaseVars() {\n        var args = arguments, i = args.length;\n        while(i--) {\n            unusedVars.push(args[i]);\n        }\n    }\n\n    function translate(ast) {\n        body = [];\n        vars = ['res'];\n        lastVarId = 0;\n        unusedVars = [];\n\n        translateExpr(ast, 'res', 'data');\n\n        body.unshift(\n            'var ',\n            Array.isArray?\n                'isArr = Array.isArray' :\n                'toStr = Object.prototype.toString, isArr = function(o) { return toStr.call(o) === \"[object Array]\"; }',\n                ', concat = Array.prototype.concat',\n                ',', vars.join(','), ';');\n\n        if(ast.type === SYNTAX.PATH) {\n            var lastPart = ast.parts[ast.parts.length - 1];\n            if(lastPart && lastPart.type === SYNTAX.POS_PRED && 'idx' in lastPart.arg) {\n                body.push('res = res[0];');\n            }\n        }\n\n        body.push('return res;');\n\n        return body.join('');\n    }\n\n    function translatePath(path, dest, ctx) {\n        var parts = path.parts,\n            i = 0, len = parts.length;\n\n        body.push(\n            dest, '=', path.fromRoot? 'data' : path.subst? 'subst.' + path.subst : ctx, ';',\n            'isArr(' + dest + ') || (' + dest + ' = [' + dest + ']);');\n\n        while(i < len) {\n            var item = parts[i++];\n            switch(item.type) {\n                case SYNTAX.SELECTOR:\n                    item.selector === '..'?\n                        translateDescendantSelector(item, dest, dest) :\n                        translateSelector(item, dest, dest);\n                    break;\n\n                case SYNTAX.OBJ_PRED:\n                    translateObjectPredicate(item, dest, dest);\n                    break;\n\n                case SYNTAX.POS_PRED:\n                    translatePosPredicate(item, dest, dest);\n                    break;\n\n                case SYNTAX.CONCAT_EXPR:\n                    translateConcatExpr(item, dest, dest);\n                    break;\n            }\n        }\n    }\n\n    function translateSelector(sel, dest, ctx) {\n        if(sel.prop) {\n            var propStr = escapeStr(sel.prop),\n                res = acquireVar(), i = acquireVar(), len = acquireVar(),\n                curCtx = acquireVar(),\n                j = acquireVar(), val = acquireVar(), tmpArr = acquireVar();\n\n            body.push(\n                res, '= [];', i, '= 0;', len, '=', ctx, '.length;', tmpArr, '= [];',\n                'while(', i, '<', len, ') {',\n                    curCtx, '=', ctx, '[', i, '++];',\n                    'if(', curCtx, '!= null) {');\n            if(sel.prop === '*') {\n                body.push(\n                        'if(typeof ', curCtx, '=== \"object\") {',\n                            'if(isArr(', curCtx, ')) {',\n                                res, '=', res, '.concat(', curCtx, ');',\n                            '}',\n                            'else {',\n                                'for(', j, ' in ', curCtx, ') {',\n                                    'if(', curCtx, '.hasOwnProperty(', j, ')) {',\n                                        val, '=', curCtx, '[', j, '];');\n                                        inlineAppendToArray(res, val);\n                    body.push(\n                                    '}',\n                                '}',\n                            '}',\n                        '}');\n            }\n            else {\n                body.push(\n                        val, '=', curCtx, '[', propStr, '];');\n                        inlineAppendToArray(res, val, tmpArr, len);\n            }\n            body.push(\n                    '}',\n                '}',\n                dest, '=', len, '> 1 &&', tmpArr, '.length?', tmpArr, '.length > 1?',\n                    'concat.apply(', res, ',', tmpArr, ') :', res, '.concat(', tmpArr, '[0]) :', res, ';');\n\n            releaseVars(res, i, len, curCtx, j, val, tmpArr);\n        }\n    }\n\n    function translateDescendantSelector(sel, dest, baseCtx) {\n        var prop = sel.prop,\n            ctx = acquireVar(), curCtx = acquireVar(), childCtxs = acquireVar(),\n            i = acquireVar(), j = acquireVar(), val = acquireVar(),\n            len = acquireVar(), res = acquireVar();\n\n        body.push(\n            ctx, '=', baseCtx, '.slice(),', res, '= [];',\n            'while(', ctx, '.length) {',\n                curCtx, '=', ctx, '.shift();');\n        prop?\n            body.push(\n                'if(typeof ', curCtx, '=== \"object\" &&', curCtx, ') {') :\n            body.push(\n                'if(typeof ', curCtx, '!= null) {');\n        body.push(\n                    childCtxs, '= [];',\n                    'if(isArr(', curCtx, ')) {',\n                        i, '= 0,', len, '=', curCtx, '.length;',\n                        'while(', i, '<', len, ') {',\n                            val, '=', curCtx, '[', i, '++];');\n        prop && body.push(\n                            'if(typeof ', val, '=== \"object\") {');\n                                inlineAppendToArray(childCtxs, val);\n        prop && body.push(\n                            '}');\n        body.push(\n                        '}',\n                    '}',\n                    'else {');\n        if(prop) {\n            if(prop !== '*') {\n                body.push(\n                        val, '=', curCtx, '[\"' + prop + '\"];');\n                        inlineAppendToArray(res, val);\n            }\n        }\n        else {\n                        inlineAppendToArray(res, curCtx);\n            body.push(\n                        'if(typeof ', curCtx, '=== \"object\") {');\n        }\n\n        body.push(\n                            'for(', j, ' in ', curCtx, ') {',\n                                'if(', curCtx, '.hasOwnProperty(', j, ')) {',\n                                    val, '=', curCtx, '[', j, '];');\n                                    inlineAppendToArray(childCtxs, val);\n                                    prop === '*' && inlineAppendToArray(res, val);\n        body.push(\n                                '}',\n                            '}');\n        prop || body.push(\n                        '}');\n        body.push(\n                    '}',\n                    childCtxs, '.length &&', ctx, '.unshift.apply(', ctx, ',', childCtxs, ');',\n                '}',\n            '}',\n            dest, '=', res, ';');\n\n        releaseVars(ctx, curCtx, childCtxs, i, j, val, len, res);\n    }\n\n    function translateObjectPredicate(expr, dest, ctx) {\n        var resVar = acquireVar(), i = acquireVar(), len = acquireVar(),\n            cond = acquireVar(), curItem = acquireVar();\n\n        body.push(\n            resVar, '= [];',\n            i, '= 0;',\n            len, '=', ctx, '.length;',\n            'while(', i, '<', len, ') {',\n                curItem, '=', ctx, '[', i, '++];');\n                translateExpr(expr.arg, cond, curItem);\n        body.push(\n                convertToBool(expr.arg, cond), '&&', resVar, '.push(', curItem, ');',\n            '}',\n            dest, '=', resVar, ';');\n\n        releaseVars(resVar, i, len, curItem, cond);\n    }\n\n    function translatePosPredicate(item, dest, ctx) {\n        var arrayExpr = item.arg, fromIdx, toIdx;\n        if(arrayExpr.idx) {\n            var idx = acquireVar();\n            translateExpr(arrayExpr.idx, idx, ctx);\n            body.push(\n                idx, '< 0 && (', idx, '=', ctx, '.length +', idx, ');',\n                dest, '=', ctx, '[', idx, '] == null? [] : [', ctx, '[', idx, ']];');\n            releaseVars(idx);\n            return false;\n        }\n        else if(arrayExpr.fromIdx) {\n            if(arrayExpr.toIdx) {\n                translateExpr(arrayExpr.fromIdx, fromIdx = acquireVar(), ctx);\n                translateExpr(arrayExpr.toIdx, toIdx = acquireVar(), ctx);\n                body.push(dest, '=', ctx, '.slice(', fromIdx, ',', toIdx, ');');\n                releaseVars(fromIdx, toIdx);\n            }\n            else {\n                translateExpr(arrayExpr.fromIdx, fromIdx = acquireVar(), ctx);\n                body.push(dest, '=', ctx, '.slice(', fromIdx, ');');\n                releaseVars(fromIdx);\n            }\n        }\n        else {\n            translateExpr(arrayExpr.toIdx, toIdx = acquireVar(), ctx);\n            body.push(dest, '=', ctx, '.slice(0,', toIdx, ');');\n            releaseVars(toIdx);\n        }\n    }\n\n    function translateExpr(expr, dest, ctx) {\n        switch(expr.type) {\n            case SYNTAX.PATH:\n                translatePath(expr, dest, ctx);\n                break;\n\n            case SYNTAX.CONCAT_EXPR:\n                translateConcatExpr(expr, dest, ctx);\n                break;\n\n            case SYNTAX.COMPARISON_EXPR:\n                translateComparisonExpr(expr, dest, ctx);\n                break;\n\n            case SYNTAX.MATH_EXPR:\n                translateMathExpr(expr, dest, ctx);\n                break;\n\n            case SYNTAX.LOGICAL_EXPR:\n                translateLogicalExpr(expr, dest, ctx);\n                break;\n\n            case SYNTAX.UNARY_EXPR:\n                translateUnaryExpr(expr, dest, ctx);\n                break;\n\n            case SYNTAX.LITERAL:\n                body.push(dest, '=');\n                translateLiteral(expr.val);\n                body.push(';');\n                break;\n        }\n    }\n\n    function translateLiteral(val) {\n        body.push(typeof val === 'string'? escapeStr(val) : val === null? 'null' : val);\n    }\n\n    function translateComparisonExpr(expr, dest, ctx) {\n        var val1 = acquireVar(), val2 = acquireVar(),\n            isVal1Array = acquireVar(), isVal2Array = acquireVar(),\n            i = acquireVar(), j = acquireVar(),\n            len1 = acquireVar(), len2 = acquireVar(),\n            leftArg = expr.args[0], rightArg = expr.args[1];\n\n        body.push(dest, '= false;');\n\n        translateExpr(leftArg, val1, ctx);\n        translateExpr(rightArg, val2, ctx);\n\n        var isLeftArgPath = leftArg.type === SYNTAX.PATH,\n            isRightArgLiteral = rightArg.type === SYNTAX.LITERAL;\n\n        body.push(isVal1Array, '=');\n        isLeftArgPath? body.push('true;') : body.push('isArr(', val1, ');');\n\n        body.push(isVal2Array, '=');\n        isRightArgLiteral? body.push('false;') : body.push('isArr(', val2, ');');\n\n        body.push(\n            'if(');\n        isLeftArgPath || body.push(isVal1Array, '&&');\n        body.push(val1, '.length === 1) {',\n                val1, '=', val1, '[0];',\n                isVal1Array, '= false;',\n            '}');\n        isRightArgLiteral || body.push(\n            'if(', isVal2Array, '&&', val2, '.length === 1) {',\n                val2, '=', val2, '[0];',\n                isVal2Array, '= false;',\n            '}');\n\n        body.push(i, '= 0;',\n            'if(', isVal1Array, ') {',\n                len1, '=', val1, '.length;');\n\n        if(!isRightArgLiteral) {\n            body.push(\n                'if(', isVal2Array, ') {',\n                    len2, '=', val2, '.length;',\n                    'while(', i, '<', len1, '&& !', dest, ') {',\n                        j, '= 0;',\n                        'while(', j, '<', len2, ') {');\n                            writeCondition(expr.op, [val1, '[', i, ']'].join(''), [val2, '[', j, ']'].join(''));\n                            body.push(\n                                dest, '= true;',\n                                'break;',\n                            '}',\n                            '++', j, ';',\n                        '}',\n                        '++', i, ';',\n                    '}',\n                '}',\n                'else {');\n        }\n        body.push(\n                    'while(', i, '<', len1, ') {');\n                        writeCondition(expr.op, [val1, '[', i, ']'].join(''), val2);\n                        body.push(\n                            dest, '= true;',\n                            'break;',\n                        '}',\n                        '++', i, ';',\n                    '}');\n\n        isRightArgLiteral || body.push(\n                '}');\n\n        body.push(\n            '}');\n\n        if(!isRightArgLiteral) {\n            body.push(\n            'else if(', isVal2Array,') {',\n                len2, '=', val2, '.length;',\n                'while(', i, '<', len2, ') {');\n                    writeCondition(expr.op, val1, [val2, '[', i, ']'].join(''));\n            body.push(\n                        dest, '= true;',\n                        'break;',\n                    '}',\n                    '++', i, ';',\n                '}',\n            '}');\n        }\n\n        body.push(\n            'else {',\n                dest, '=', binaryOperators[expr.op](val1, val2), ';',\n            '}');\n\n        releaseVars(val1, val2, isVal1Array, isVal2Array, i, j, len1, len2);\n    }\n\n    function writeCondition(op, val1Expr, val2Expr) {\n        body.push('if(', binaryOperators[op](val1Expr, val2Expr), ') {');\n    }\n\n    function translateLogicalExpr(expr, dest, ctx) {\n        var conditionVars = [],\n            args = expr.args, len = args.length,\n            i = 0, val;\n\n        body.push(dest, '= false;');\n        switch(expr.op) {\n            case '&&':\n                while(i < len) {\n                    conditionVars.push(val = acquireVar());\n                    translateExpr(args[i], val, ctx);\n                    body.push('if(', convertToBool(args[i++], val), ') {');\n                }\n                body.push(dest, '= true;');\n                break;\n\n            case '||':\n                while(i < len) {\n                    conditionVars.push(val = acquireVar());\n                    translateExpr(args[i], val, ctx);\n                    body.push(\n                        'if(', convertToBool(args[i], val), ') {',\n                            dest, '= true;',\n                        '}');\n                    if(i++ + 1 < len) {\n                        body.push('else {');\n                    }\n                }\n                --len;\n                break;\n        }\n\n        while(len--) {\n            body.push('}');\n        }\n\n        releaseVars.apply(null, conditionVars);\n    }\n\n    function translateMathExpr(expr, dest, ctx) {\n        var val1 = acquireVar(),\n            val2 = acquireVar(),\n            args = expr.args;\n\n        translateExpr(args[0], val1, ctx);\n        translateExpr(args[1], val2, ctx);\n\n        body.push(\n            dest, '=',\n            binaryOperators[expr.op](\n                convertToSingleValue(args[0], val1),\n                convertToSingleValue(args[1], val2)),\n            ';');\n\n        releaseVars(val1, val2);\n    }\n\n    function translateUnaryExpr(expr, dest, ctx) {\n        var val = acquireVar(),\n            arg = expr.arg;\n\n        translateExpr(arg, val, ctx);\n\n        switch(expr.op) {\n            case '!':\n                body.push(dest, '= !', convertToBool(arg, val) + ';');\n                break;\n\n            case '-':\n                body.push(dest, '= -', convertToSingleValue(arg, val) + ';');\n                break;\n        }\n\n        releaseVars(val);\n    }\n\n    function translateConcatExpr(expr, dest, ctx) {\n        var argVars = [],\n            args = expr.args,\n            len = args.length,\n            i = 0;\n\n        while(i < len) {\n            argVars.push(acquireVar());\n            translateExpr(args[i], argVars[i++], ctx);\n        }\n\n        body.push(dest, '= concat.call(', argVars.join(','), ');');\n\n        releaseVars.apply(null, argVars);\n    }\n\n    function escapeStr(s) {\n        return '\\'' + s.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, '\\\\\\'') + '\\'';\n    }\n\n    function inlineAppendToArray(res, val, tmpArr, len) {\n        body.push(\n            'if(typeof ', val, '!== \"undefined\") {',\n                'if(isArr(', val, ')) {');\n        if(tmpArr) {\n            body.push(\n                    len, '> 1?');\n                        inlinePushToArray(tmpArr, val);\n            body.push(\n                        ':');\n        }\n        body.push(\n                    res, '=', res, '.length?', res, '.concat(', val, ') :', val, '.slice()', ';',\n                '}',\n                'else {');\n        tmpArr && body.push(\n                    'if(', tmpArr, '.length) {',\n                        res, '= concat.apply(', res, ',', tmpArr, ');',\n                        tmpArr, '= [];',\n                    '}');\n                    inlinePushToArray(res, val);\n        body.push(';',\n                '}',\n            '}');\n    }\n\n    function inlinePushToArray(res, val) {\n        body.push(res, '.length?', res, '.push(', val, ') :',  res, '[0] =', val);\n    }\n\n    function convertToBool(arg, varName) {\n        switch(arg.type) {\n            case SYNTAX.LOGICAL_EXPR:\n                return varName;\n\n            case SYNTAX.LITERAL:\n                return '!!' + varName;\n\n            case SYNTAX.PATH:\n                return varName + '.length > 0';\n\n            default:\n                return ['(typeof ', varName, '=== \"boolean\"?',\n                    varName, ':',\n                    'isArr(', varName, ')?', varName, '.length > 0 : !!', varName, ')'].join('');\n        }\n    }\n\n    function convertToSingleValue(arg, varName) {\n        switch(arg.type) {\n            case SYNTAX.LITERAL:\n                return varName;\n\n            case SYNTAX.PATH:\n                return varName + '[0]';\n\n            default:\n                return ['(isArr(', varName, ')?', varName, '[0] : ', varName, ')'].join('');\n        }\n    }\n\n    function startsWithStrict(val1, val2) {\n        return ['typeof ', val1, '=== \"string\" && typeof ', val2, '=== \"string\" &&',\n            val1, '.indexOf(', val2, ') === 0'].join('');\n    }\n\n    function startsWith(val1, val2) {\n        return [val1, '!= null &&', val2, '!= null &&',\n            val1, '.toString().toLowerCase().indexOf(', val2, '.toString().toLowerCase()) === 0'].join('');\n    }\n\n    function endsWithStrict(val1, val2) {\n        return ['typeof ', val1, '=== \"string\" && typeof ', val2, '=== \"string\" &&',\n            val1, '.length >=', val2, '.length &&',\n            val1, '.lastIndexOf(', val2, ') ===', val1, '.length -', val2, '.length'].join('');\n    }\n\n    function endsWith(val1, val2) {\n        return [val1, '!= null &&', val2, '!= null &&',\n            '(', val1, '=', val1, '.toString()).length >=', '(', val2, '=', val2, '.toString()).length &&',\n            '(', val1, '.toLowerCase()).lastIndexOf(', '(', val2, '.toLowerCase())) ===',\n            val1, '.length -', val2, '.length'].join('');\n    }\n\n    function containsStrict(val1, val2) {\n        return ['typeof ', val1, '=== \"string\" && typeof ', val2, '=== \"string\" &&',\n            val1, '.indexOf(', val2, ') > -1'].join('');\n    }\n\n    function contains(val1, val2) {\n        return [val1, '!= null && ', val2, '!= null &&',\n            val1, '.toString().toLowerCase().indexOf(', val2, '.toString().toLowerCase()) > -1'].join('');\n    }\n\n    var binaryOperators = {\n            '===' : function(val1, val2) {\n                return val1 + '===' + val2;\n            },\n\n            '==' : function(val1, val2) {\n                return ['typeof ', val1, '=== \"string\" && typeof ', val2, '=== \"string\"?',\n                    val1, '.toLowerCase() ===', val2, '.toLowerCase() :' +\n                    val1, '==', val2].join('');\n            },\n\n            '>=' : function(val1, val2) {\n                return val1 + '>=' + val2;\n            },\n\n            '>' : function(val1, val2) {\n                return val1 + '>' + val2;\n            },\n\n            '<=' : function(val1, val2) {\n                return val1 + '<=' + val2;\n            },\n\n            '<' : function(val1, val2) {\n                return val1 + '<' + val2;\n            },\n\n            '!==' : function(val1, val2) {\n                return val1 + '!==' + val2;\n            },\n\n            '!=' : function(val1, val2) {\n                return val1 + '!=' + val2;\n            },\n\n            '^==' : startsWithStrict,\n\n            '==^' : function(val1, val2) {\n                return startsWithStrict(val2, val1);\n            },\n\n            '^=' : startsWith,\n\n            '=^' : function(val1, val2) {\n                return startsWith(val2, val1);\n            },\n\n            '$==' : endsWithStrict,\n\n            '==$' : function(val1, val2) {\n                return endsWithStrict(val2, val1);\n            },\n\n            '$=' : endsWith,\n\n            '=$' : function(val1, val2) {\n                return endsWith(val2, val1);\n            },\n\n            '*==' : containsStrict,\n\n            '==*' : function(val1, val2) {\n                return containsStrict(val2, val1);\n            },\n\n            '=*' : function(val1, val2) {\n                return contains(val2, val1);\n            },\n\n            '*=' : contains,\n\n            '+' : function(val1, val2) {\n                return val1 + '+' + val2;\n            },\n\n            '-' : function(val1, val2) {\n                return val1 + '-' + val2;\n            },\n\n            '*' : function(val1, val2) {\n                return val1 + '*' + val2;\n            },\n\n            '/' : function(val1, val2) {\n                return val1 + '/' + val2;\n            },\n\n            '%' : function(val1, val2) {\n                return val1 + '%' + val2;\n            }\n        };\n\n    return translate;\n})();\n\nfunction compile(path) {\n    return Function('data,subst', translate(parse(path)));\n}\n\nvar cache = {},\n    cacheKeys = [],\n    params = {\n        cacheSize : 100\n    },\n    setParamsHooks = {\n        cacheSize : function(oldVal, newVal) {\n            if(newVal < oldVal && cacheKeys.length > newVal) {\n                var removedKeys = cacheKeys.splice(0, cacheKeys.length - newVal),\n                    i = removedKeys.length;\n\n                while(i--) {\n                    delete cache[removedKeys[i]];\n                }\n            }\n        }\n    };\n\nvar decl = function(path, ctx, substs) {\n    if(!cache[path]) {\n        cache[path] = compile(path);\n        if(cacheKeys.push(path) > params.cacheSize) {\n            delete cache[cacheKeys.shift()];\n        }\n    }\n\n    return cache[path](ctx, substs || {});\n};\n\ndecl.version = '0.3.4';\n\ndecl.params = function(_params) {\n    if(!arguments.length) {\n        return params;\n    }\n\n    for(var name in _params) {\n        if(_params.hasOwnProperty(name)) {\n            setParamsHooks[name] && setParamsHooks[name](params[name], _params[name]);\n            params[name] = _params[name];\n        }\n    }\n};\n\ndecl.compile = compile;\n\ndecl.apply = decl;\n\nif( true && typeof module.exports === 'object') {\n    module.exports = decl;\n}\nelse if(typeof modules === 'object') {\n    modules.define('jspath', function(provide) {\n        provide(decl);\n    });\n}\nelse if(true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function(require, exports, module) {\n        module.exports = decl;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\nelse {}\n\n})();\n\n\n//# sourceURL=webpack://ami-http-client/./node_modules/jspath/lib/jspath.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/client.js");
/******/ 	
/******/ })()
;